const lineReader = require('line-reader');
const fs=require('fs');
function template(infile,outfile,callback){
    template.fileContent='';
    template.infile=infile;
    template.outfile=outfile;
    readLine();
    function readLine(){
        lineReader.eachLine(template.infile, function(line, last) {
            //转义字符
            line=changeY(line);
            //替换if，else，elseif
            line=changeIf(line);
            //替换for
            line=changeFor(line);
            //替换变量
            line=change$(line);
            //翻译页面
            line=resWrite(line);
            template.fileContent+=line+'\n';
            if(last){
                writeFile();
                callback();
            }
        });
    }

    function writeFile(){
        template.fileContent='function temp(resp,val){\nwith(val){\n'+template.fileContent+'}\n}\nmodule.exports=temp;';
        fs.writeFileSync(template.outfile, template.fileContent,'utf-8');
    }

    function change$(line){
        var reg=new RegExp(/\${[a-z0-9A-Z_\.]+}/g);
        var result;
        while ((result=reg.exec(line))!= null){
             var m=result[0].slice(2, result[0].length-1);
             line=line.replace(result[0],'"+'+m+'+"');
        }
        return line;
    }

    function resWrite(line){
        line='resp.write("'+line+'\\n");';
        return line;
    }

    function changeY(line){
        line=line.replace(/\"/g,'\\"');
        return line;
    }

    function changeIf(line){
        {
            var reg = new RegExp(/<if[ ]+test[ ]*=[ ]*\\\"[ ]*\${.*?}[ ]*\\\"[ ]*>/g);
            var result;
            while ((result = reg.exec(line)) != null) {
                var res = new RegExp(/\${.*?}/);
                var rm = res.exec(result[0]);
                if (rm != null) {
                    line = line.replace(result[0], '");if(' + rm[0].slice(2, rm[0].length - 1) + '){resp.write("');
                }
            }
        }
        {
            var reg = new RegExp(/<elseif[ ]+test[ ]*=[ ]*\\\"[ ]*\${.*?}[ ]*\\\"[ ]*\/>/g);
            var result;
            while ((result = reg.exec(line)) != null) {
                var res = new RegExp(/\${.*?}/);
                var rm = res.exec(result[0]);
                if (rm != null) {
                    line = line.replace(result[0], '");}else if(' + rm[0].slice(2, rm[0].length - 1) + '){resp.write("');
                }
            }
        }
        line=line.replace(/<else\/>/g,'");}else{resp.write("');
        line=line.replace(/<\/if>/g,'");}resp.write("');
        return line;
    }

    function changeFor(line){
        {
            var reg = new RegExp(/<for[ ]+from[ ]*=[ ]*\\\"[ ]*\${.*?}[ ]*\\\".*?>/g);
            var result;
            while ((result = reg.exec(line)) != null) {
                var res = new RegExp(/\${.*?}/);
                var rm = res.exec(result[0]);
                var r=rm[0].slice(2, rm[0].length - 1);
                var val=new RegExp(/value[ ]*=[ ]*\\\"[ ]*[a-z0-9A-Z_]+?[ ]*\\\"/);
                var v = val.exec(result[0]);
                var p=v[0].slice(v[0].indexOf('\"')+1, v[0].lastIndexOf('\"')-1).trim();
                var key=new RegExp(/key[ ]*=[ ]*\\\"[ ]*[a-z0-9A-Z_]+?[ ]*\\\"/);
                var k = key.exec(result[0]);
                var q=k[0].slice(k[0].indexOf('\"')+1, k[0].lastIndexOf('\"')-1).trim();
                if (rm != null) {
                    line = line.replace(result[0], '");for(var key in '+r+'){val.put("'+p+'",'+r+'[key]);val.put("'+q+'",key);resp.write("');
                }

            }
        }
        line=line.replace(/<\/for>/g,'");}resp.write("');
        return line;
    }
}
module.exports=template;