const lineReader = require('line-reader');
const fs=require('fs');
var readOver=0;
var _template='';
var _compile='';
function template(infile,outfile,template,compile,callback){
    _template=template;
    _compile=compile;
    readLine(infile,outfile);
    function readLine(infile,outfile) {
        readOver++;
        var fileContent = '';
        lineReader.eachLine(infile, function (line, last) {
            //转义字符
            line = changeY(line);
            //替换include文件
            line = changeInclude(line);
            //替换if，else，elseif
            line = changeIf(line);
            //替换for
            line = changeFor(line);
            //替换变量
            line = change$(line);
            //翻译页面
            line = resWrite(line);
            fileContent += line + '\n';
            if (last) {
                readOver--;
                fileContent='function temp(resp,val){\nwith(val){\n'+fileContent+'}\n}\nmodule.exports=temp;';
                fs.writeFileSync(outfile, fileContent,'utf-8');
                if(readOver==0){
                    callback();
                }
            }
        });
    }

    function change$(line){
        var reg=new RegExp(/\${[a-z0-9A-Z_\.]+}/g);
        var result;
        while ((result=reg.exec(line))!= null){
             var m=result[0].slice(2, result[0].length-1);
             line=line.replace(result[0],'"+'+m+'+"');
        }
        return line;
    }

    function resWrite(line){
        line='resp.write("'+line+'\\n");';
        return line;
    }

    function changeY(line){
        line=line.replace(/\"/g,'\\"');
        return line;
    }

    function changeIf(line){
        {
            var reg = new RegExp(/<if[ ]+test[ ]*=[ ]*\\\"[ ]*\${.*?}[ ]*\\\"[ ]*>/g);
            var result;
            while ((result = reg.exec(line)) != null) {
                var res = new RegExp(/\${.*?}/);
                var rm = res.exec(result[0]);
                if (rm != null) {
                    line = line.replace(result[0], '");if(' + rm[0].slice(2, rm[0].length - 1) + '){resp.write("');
                }
            }
        }
        {
            var reg = new RegExp(/<elseif[ ]+test[ ]*=[ ]*\\\"[ ]*\${.*?}[ ]*\\\"[ ]*\/>/g);
            var result;
            while ((result = reg.exec(line)) != null) {
                var res = new RegExp(/\${.*?}/);
                var rm = res.exec(result[0]);
                if (rm != null) {
                    line = line.replace(result[0], '");}else if(' + rm[0].slice(2, rm[0].length - 1) + '){resp.write("');
                }
            }
        }
        line=line.replace(/<else\/>/g,'");}else{resp.write("');
        line=line.replace(/<\/if>/g,'");}resp.write("');
        return line;
    }

    function changeFor(line){
        {
            var reg = new RegExp(/<for[ ]+from[ ]*=[ ]*\\\"[ ]*\${.*?}[ ]*\\\".*?>/g);
            var result;
            while ((result = reg.exec(line)) != null) {
                var res = new RegExp(/\${.*?}/);
                var rm = res.exec(result[0]);
                var r=rm[0].slice(2, rm[0].length - 1);
                var val=new RegExp(/value[ ]*=[ ]*\\\"[ ]*[a-z0-9A-Z_]+?[ ]*\\\"/);
                var v = val.exec(result[0]);
                var p=v[0].slice(v[0].indexOf('\"')+1, v[0].lastIndexOf('\"')-1).trim();
                var key=new RegExp(/key[ ]*=[ ]*\\\"[ ]*[a-z0-9A-Z_]+?[ ]*\\\"/);
                var k = key.exec(result[0]);
                var q=k[0].slice(k[0].indexOf('\"')+1, k[0].lastIndexOf('\"')-1).trim();
                if (rm != null) {
                    line = line.replace(result[0], '");for(var key in '+r+'){val.put("'+p+'",'+r+'[key]);val.put("'+q+'",key);resp.write("');
                }

            }
        }
        line=line.replace(/<\/for>/g,'");}resp.write("');
        return line;
    }

    function changeInclude(line){
        var reg = new RegExp(/<include[ ]*file[ ]*=[ ]*\\\"[ ]*.*?[ ]*\\\"[ ]*\/>/g);
        var result;
        while ((result = reg.exec(line)) != null) {
            var res = new RegExp(/file[ ]*=[ ]*\\\"[ ]*[a-z0-9A-Z_\.]+?[ ]*\\\"/);
            var rm = res.exec(result[0]);
            if (rm != null) {
                var q=rm[0].slice(rm[0].indexOf('\"')+1, rm[0].lastIndexOf('\"')-1).trim();
                var ql=q.slice(0,q.lastIndexOf('.'));
                readLine(_template+"/"+q,_compile+"/"+ql+".js");
                line=line.replace(result[0],'");require("./'+ql+'")(resp,val);resp.write("');
            }
        }
        return line;
    }
}
module.exports=template;